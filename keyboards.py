from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from typing import List, Optional
from config import GAMES, COUNTRIES, POSITIONS, GOALS, REPORT_REASONS


def get_main_menu_kb(has_profile: bool = False) -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    builder = ReplyKeyboardBuilder()

    if has_profile:
        builder.row(
            KeyboardButton(text="üîç –ü–æ–∏—Å–∫"),
            KeyboardButton(text="üìã –ú–æ—è –∞–Ω–∫–µ—Ç–∞")
        )
        builder.row(
            KeyboardButton(text="‚ù§Ô∏è –õ–∞–π–∫–∏"),
            KeyboardButton(text="üíû –ú—ç—Ç—á–∏")
        )
        builder.row(
            KeyboardButton(text="üéÆ –°–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É"),
            KeyboardButton(text="‚≠ê –û—Ç–∑—ã–≤—ã")
        )
    else:
        builder.row(
            KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
        )

    return builder.as_markup(resize_keyboard=True)


def get_games_kb() -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä –∏–≥—Ä—ã"""
    builder = InlineKeyboardBuilder()
    for game_key, game_name in GAMES.items():
        builder.button(text=game_name, callback_data=f"game:{game_key}")
    builder.adjust(1)
    return builder.as_markup()


def get_skip_kb() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")
    return builder.as_markup()


def get_countries_kb() -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã"""
    builder = InlineKeyboardBuilder()
    for country in COUNTRIES:
        builder.button(text=country, callback_data=f"country:{country}")
    builder.button(text="üåç –ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å", callback_data="country:none")
    builder.adjust(2)
    return builder.as_markup()


def get_positions_kb(game: str, selected: List[str] = None) -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–π/—Ä–æ–ª–µ–π"""
    selected = selected or []
    builder = InlineKeyboardBuilder()

    positions = POSITIONS.get(game, [])
    for position in positions:
        if position in selected:
            builder.button(text=f"‚úÖ {position}", callback_data=f"pos_remove:{position}")
        else:
            builder.button(text=position, callback_data=f"pos_add:{position}")

    builder.adjust(2)

    if selected:
        builder.row(
            InlineKeyboardButton(text="‚úîÔ∏è –ì–æ—Ç–æ–≤–æ", callback_data="positions_done")
        )

    builder.row(
        InlineKeyboardButton(text="‚è≠ –ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å", callback_data="positions_skip")
    )

    return builder.as_markup()


def get_goals_kb(selected: List[str] = None) -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä —Ü–µ–ª–µ–π"""
    selected = selected or []
    builder = InlineKeyboardBuilder()

    for goal in GOALS:
        if goal in selected:
            builder.button(text=f"‚úÖ {goal}", callback_data=f"goal_remove:{goal}")
        else:
            builder.button(text=goal, callback_data=f"goal_add:{goal}")

    builder.adjust(2)

    if selected:
        builder.row(
            InlineKeyboardButton(text="‚úîÔ∏è –ì–æ—Ç–æ–≤–æ", callback_data="goals_done")
        )

    return builder.as_markup()


def get_profile_confirm_kb() -> InlineKeyboardMarkup:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="profile_save"),
        InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="profile_edit")
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="profile_cancel")
    )
    return builder.as_markup()


def get_search_kb() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ù§Ô∏è –õ–∞–π–∫", callback_data="like"),
        InlineKeyboardButton(text="üëé –î–∏–∑–ª–∞–π–∫", callback_data="dislike")
    )
    builder.row(
        InlineKeyboardButton(text="üö© –ñ–∞–ª–æ–±–∞", callback_data="report")
    )
    builder.row(
        InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="to_menu")
    )
    return builder.as_markup()


def get_report_reasons_kb() -> InlineKeyboardMarkup:
    """–ü—Ä–∏—á–∏–Ω—ã –∂–∞–ª–æ–±"""
    builder = InlineKeyboardBuilder()
    for reason in REPORT_REASONS:
        builder.button(text=reason, callback_data=f"report_reason:{reason}")
    builder.adjust(1)
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="report_cancel")
    )
    return builder.as_markup()


def get_rating_kb() -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    builder = InlineKeyboardBuilder()
    for i in range(1, 6):
        builder.button(text="‚≠ê" * i, callback_data=f"rating:{i}")
    builder.adjust(1)
    return builder.as_markup()


def get_back_to_menu_kb() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_menu")
    return builder.as_markup()