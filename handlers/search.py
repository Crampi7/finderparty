from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from database import Database
from keyboards import *
from states import SearchState, ReportState
from config import GAMES

router = Router()
db = Database()


@router.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def start_search(message: Message, state: FSMContext):
    user_id = message.from_user.id
    games = await db.get_user_games(user_id)

    if not games:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É!")
        return

    if len(games) > 1:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=get_games_kb()
        )
        # –¢—É—Ç –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
    else:
        game = games[0]
        await state.update_data(search_game=game)
        await show_next_profile(message, state)


async def show_next_profile(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É"""
    data = await state.get_data()
    game = data.get('search_game')
    user_id = message.from_user.id

    profile = await db.get_next_profile(user_id, game)

    if not profile:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="reset_viewed")
        builder.button(text="üè† –í –º–µ–Ω—é", callback_data="to_menu")

        await message.answer(
            "üòî –ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!\n\n"
            "–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã.\n"
            "–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–Ω–∞—á–∞–ª–∞ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ.",
            reply_markup=builder.as_markup()
        )
        return

    await state.update_data(current_profile_id=profile['user_id'])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã
    game_name = GAMES.get(game)
    text = f"üéÆ <b>{game_name}</b>\n"
    text += f"üë§ <b>{profile['username']}</b>\n\n"

    if profile.get('country'):
        text += f"üåç –°—Ç—Ä–∞–Ω–∞: {profile['country']}\n"

    if profile.get('positions'):
        text += f"üéØ –ü–æ–∑–∏—Ü–∏–∏: {', '.join(profile['positions'])}\n"

    if profile.get('goals'):
        text += f"üéÆ –¶–µ–ª–∏: {', '.join(profile['goals'])}\n"

    if profile.get('avg_rating') > 0:
        text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {profile['avg_rating']:.1f} ({profile['review_count']} –æ—Ç–∑—ã–≤–æ–≤)\n"

    if profile.get('about_text'):
        text += f"\nüìù –û —Å–µ–±–µ:\n{profile['about_text']}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É
    if profile.get('rating_screenshot'):
        await message.answer_photo(
            photo=profile['rating_screenshot'],
            caption=text,
            reply_markup=get_search_kb(),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            text,
            reply_markup=get_search_kb(),
            parse_mode="HTML"
        )

    await state.set_state(SearchState.viewing_profiles)


@router.callback_query(SearchState.viewing_profiles, F.data == "like")
async def handle_like(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    from_user_id = callback.from_user.id
    to_user_id = data.get('current_profile_id')
    game = data.get('search_game')

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
    is_match = await db.add_like(from_user_id, to_user_id, game)

    if is_match:
        await callback.answer("üíû –≠–¢–û –ú–≠–¢–ß! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª '–ú—ç—Ç—á–∏'", show_alert=True)
    else:
        await callback.answer("‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
    await callback.message.delete()
    await show_next_profile(callback.message, state)


@router.callback_query(SearchState.viewing_profiles, F.data == "dislike")
async def handle_dislike(callback: CallbackQuery, state: FSMContext):
    await callback.answer("üëé")
    await callback.message.delete()
    await show_next_profile(callback.message, state)


@router.callback_query(SearchState.viewing_profiles, F.data == "report")
async def start_report(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(
        reply_markup=get_report_reasons_kb()
    )
    await state.set_state(ReportState.choosing_reason)
    await callback.answer()


@router.callback_query(ReportState.choosing_reason, F.data.startswith("report_reason:"))
async def handle_report_reason(callback: CallbackQuery, state: FSMContext):
    reason = callback.data.split(":")[1]
    await state.update_data(report_reason=reason)

    if reason == "–î—Ä—É–≥–æ–µ":
        await callback.message.edit_text(
            "üìù –û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:",
            reply_markup=None
        )
        await state.set_state(ReportState.entering_comment)
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–ª–æ–±—É
        data = await state.get_data()
        from_user_id = callback.from_user.id
        reported_user_id = data.get('current_profile_id')
        game = data.get('search_game')

        await db.add_report(from_user_id, reported_user_id, game, reason)

        await callback.answer("üö© –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", show_alert=True)
        await callback.message.delete()
        await show_next_profile(callback.message, state)
        await state.set_state(SearchState.viewing_profiles)

    await callback.answer()


@router.message(ReportState.entering_comment, F.text)
async def process_report_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    from_user_id = message.from_user.id
    reported_user_id = data.get('current_profile_id')
    game = data.get('search_game')
    reason = data.get('report_reason')

    await db.add_report(from_user_id, reported_user_id, game, reason, message.text)

    await message.answer("üö© –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    await show_next_profile(message, state)
    await state.set_state(SearchState.viewing_profiles)


@router.callback_query(F.data == "reset_viewed")
async def reset_viewed(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    game = data.get('search_game')

    await db.reset_viewed_profiles(user_id, game)

    await callback.answer("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞!")
    await callback.message.delete()
    await show_next_profile(callback.message, state)


@router.callback_query(ReportState.choosing_reason, F.data == "report_cancel")
async def cancel_report(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SearchState.viewing_profiles)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
    await callback.message.edit_reply_markup(
        reply_markup=get_search_kb()
    )
    await callback.answer("–ñ–∞–ª–æ–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")