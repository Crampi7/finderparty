from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from database import Database
from keyboards import *
from states import ReviewState
from config import GAMES

router = Router()
db = Database()


@router.message(F.text == "üíû –ú—ç—Ç—á–∏")
async def show_matches(message: Message, state: FSMContext):
    user_id = message.from_user.id
    games = await db.get_user_games(user_id)

    if not games:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç")
        return

    all_matches = []
    for game in games:
        matches = await db.get_matches(user_id, game)
        for match in matches:
            match['game'] = game
            all_matches.append(match)

    if not all_matches:
        await message.answer(
            "üíî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º—ç—Ç—á–µ–π\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–∫–∞—Ç—å —Ç–∏–º–º–µ–π—Ç–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ –ü–æ–∏—Å–∫!"
        )
        return

    text = "üíû <b>–í–∞—à–∏ –º—ç—Ç—á–∏:</b>\n\n"

    for i, match in enumerate(all_matches, 1):
        game_name = GAMES.get(match['game'])
        text += f"{i}. <b>{match['username']}</b> ({game_name})\n"

        if match.get('about_text'):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Discord –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            lines = match['about_text'].split('\n')
            for line in lines:
                if any(word in line.lower() for word in ['discord', 'telegram', 'steam', '–∫–æ–Ω—Ç–∞–∫—Ç']):
                    text += f"   üìû {line}\n"

        text += "\n"

    text += "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫—É –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ–± –∏–≥—Ä–µ!"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
    builder = InlineKeyboardBuilder()
    for i, match in enumerate(all_matches):
        builder.button(
            text=f"‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ {match['username']}",
            callback_data=f"review:{match['user_id']}:{match['game']}"
        )
    builder.adjust(1)

    await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")


@router.message(F.text == "‚ù§Ô∏è –õ–∞–π–∫–∏")
async def show_likes(message: Message):
    user_id = message.from_user.id
    games = await db.get_user_games(user_id)

    if not games:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç")
        return

    all_likes = []
    for game in games:
        likes = await db.get_incoming_likes(user_id, game)
        for like in likes:
            like['game'] = game
            all_likes.append(like)

    if not all_likes:
        await message.answer(
            "üíî –í–∞—Å –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ª–∞–π–∫–Ω—É–ª\n\n"
            "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–∫–∞—Ç—å!"
        )
        return

    text = "‚ù§Ô∏è <b>–í–∞—Å –ª–∞–π–∫–Ω—É–ª–∏:</b>\n\n"

    for i, like in enumerate(all_likes, 1):
        game_name = GAMES.get(like['game'])
        text += f"{i}. <b>{like['username']}</b> ({game_name})\n"

        if like.get('positions'):
            text += f"   üéØ {', '.join(like['positions'])}\n"

        if like.get('goals'):
            text += f"   üéÆ {', '.join(like['goals'])}\n"

        text += "\n"

    text += "üí° –õ–∞–π–∫–Ω–∏—Ç–µ –∏—Ö –≤ –æ—Ç–≤–µ—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ –ü–æ–∏—Å–∫, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –º—ç—Ç—á!"

    await message.answer(text, parse_mode="HTML")


@router.callback_query(F.data.startswith("review:"))
async def start_review(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split(":")
    to_user_id = int(parts[1])
    game = parts[2]

    await state.update_data(review_to_user=to_user_id, review_game=game)

    await callback.message.answer(
        "‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:",
        reply_markup=get_rating_kb()
    )
    await state.set_state(ReviewState.choosing_rating)
    await callback.answer()


@router.callback_query(ReviewState.choosing_rating, F.data.startswith("rating:"))
async def handle_rating(callback: CallbackQuery, state: FSMContext):
    rating = int(callback.data.split(":")[1])
    await state.update_data(review_rating=rating)

    await callback.message.edit_text(
        f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {'‚≠ê' * rating}\n\n"
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip"
    )
    await state.set_state(ReviewState.entering_comment)
    await callback.answer()


@router.message(ReviewState.entering_comment)
async def process_review_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    from_user_id = message.from_user.id
    to_user_id = data.get('review_to_user')
    game = data.get('review_game')
    rating = data.get('review_rating')

    comment = None if message.text == "/skip" else message.text

    await db.add_review(from_user_id, to_user_id, game, rating, comment)

    await message.answer(
        "‚úÖ –û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É."
    )
    await state.clear()


@router.message(F.text == "‚≠ê –û—Ç–∑—ã–≤—ã")
async def show_reviews(message: Message):
    # –¢—É—Ç –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await message.answer(
        "üìä –†–∞–∑–¥–µ–ª –æ—Ç–∑—ã–≤–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
        "–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—Å–µ –æ—Ç–∑—ã–≤—ã –æ –≤–∞—Å."
    )